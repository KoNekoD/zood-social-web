/* tslint:disable */
/* eslint-disable */
/**
 * ZooD Industries
 * Свободная соцсеть.
 *
 * The version of the OpenAPI document: 0.8.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import {Configuration} from './configuration';
import globalAxios, {AxiosInstance, AxiosPromise} from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {BASE_PATH, BaseAPI, COLLECTION_FORMATS, RequestArgs, RequiredError} from './base';

/**
 *
 * @export
 * @interface AcceptInviteCommand
 */
export interface AcceptInviteCommand {
    /**
     *
     * @type {string}
     * @memberof AcceptInviteCommand
     */
    profileId?: string;
    /**
     *
     * @type {string}
     * @memberof AcceptInviteCommand
     */
    chatId?: string;
}

/**
 *
 * @export
 * @interface ChatDetailedDTO
 */
export interface ChatDetailedDTO {
    /**
     *
     * @type {string}
     * @memberof ChatDetailedDTO
     */
    chatId?: string;
    /**
     *
     * @type {string}
     * @memberof ChatDetailedDTO
     */
    chatTitle?: string;
    /**
     *
     * @type {string}
     * @memberof ChatDetailedDTO
     */
    chatDescription?: string;
    /**
     *
     * @type {Array<RoleDTO>}
     * @memberof ChatDetailedDTO
     */
    chatRoles?: Array<RoleDTO>;
    /**
     *
     * @type {ChatParticipantStatusEnum}
     * @memberof ChatDetailedDTO
     */
    participantStatusEnum?: ChatParticipantStatusEnum;
    /**
     *
     * @type {number}
     * @memberof ChatDetailedDTO
     */
    participantChatRoleId?: number;
}

/**
 *
 * @export
 * @interface ChatMinimalDTO
 */
export interface ChatMinimalDTO {
    /**
     *
     * @type {string}
     * @memberof ChatMinimalDTO
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ChatMinimalDTO
     */
    title?: string;
}

/**
 *
 * @export
 * @enum {string}
 */
export enum ChatParticipantStatusEnum {
    Invited = 'Invited',
    Member = 'Member'
}

/**
 *
 * @export
 * @interface CreateChatCommand
 */
export interface CreateChatCommand {
    /**
     *
     * @type {string}
     * @memberof CreateChatCommand
     */
    chatTitle?: string;
    /**
     *
     * @type {string}
     * @memberof CreateChatCommand
     */
    chatDescription?: string;
    /**
     *
     * @type {string}
     * @memberof CreateChatCommand
     */
    creatorProfileId?: string;
}

/**
 *
 * @export
 * @interface CreateProfileCommand
 */
export interface CreateProfileCommand {
    /**
     *
     * @type {string}
     * @memberof CreateProfileCommand
     */
    firstName?: string;
    /**
     *
     * @type {string}
     * @memberof CreateProfileCommand
     */
    lastName?: string | null;
}

/**
 *
 * @export
 * @interface DeleteChatCommand
 */
export interface DeleteChatCommand {
    /**
     *
     * @type {string}
     * @memberof DeleteChatCommand
     */
    profileId?: string;
    /**
     *
     * @type {string}
     * @memberof DeleteChatCommand
     */
    chatId?: string;
}

/**
 *
 * @export
 * @interface FriendDTO
 */
export interface FriendDTO {
    /**
     *
     * @type {string}
     * @memberof FriendDTO
     */
    senderProfileId?: string;
    /**
     *
     * @type {string}
     * @memberof FriendDTO
     */
    destinationProfileId?: string;
    /**
     *
     * @type {FriendRelationEnum}
     * @memberof FriendDTO
     */
    relationType?: FriendRelationEnum;
}

/**
 *
 * @export
 * @enum {string}
 */
export enum FriendRelationEnum {
    RelationsSenderToDestination = 'RelationsSenderToDestination',
    RelationMutual = 'RelationMutual',
    RelationDestinationToSender = 'RelationDestinationToSender'
}

/**
 *
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     *
     * @type {string}
     * @memberof LoginRequest
     */
    login?: string;
    /**
     *
     * @type {string}
     * @memberof LoginRequest
     */
    password?: string;
}

/**
 *
 * @export
 * @interface MessageByChatDTO
 */
export interface MessageByChatDTO {
    /**
     *
     * @type {string}
     * @memberof MessageByChatDTO
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof MessageByChatDTO
     */
    from?: string;
    /**
     *
     * @type {string}
     * @memberof MessageByChatDTO
     */
    content?: string;
}

/**
 *
 * @export
 * @interface ParticipantDTO
 */
export interface ParticipantDTO {
    /**
     *
     * @type {ProfileDTO}
     * @memberof ParticipantDTO
     */
    profile?: ProfileDTO;
    /**
     *
     * @type {number}
     * @memberof ParticipantDTO
     */
    roleId?: number;
    /**
     *
     * @type {ChatParticipantStatusEnum}
     * @memberof ParticipantDTO
     */
    status?: ChatParticipantStatusEnum;
}

/**
 *
 * @export
 * @interface ProfileDTO
 */
export interface ProfileDTO {
    /**
     *
     * @type {string}
     * @memberof ProfileDTO
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ProfileDTO
     */
    firstName?: string;
    /**
     *
     * @type {string}
     * @memberof ProfileDTO
     */
    lastName?: string | null;
}

/**
 *
 * @export
 * @interface ProfileUpdateCommand
 */
export interface ProfileUpdateCommand {
    /**
     *
     * @type {string}
     * @memberof ProfileUpdateCommand
     */
    profileId?: string;
    /**
     *
     * @type {string}
     * @memberof ProfileUpdateCommand
     */
    firstName?: string;
    /**
     *
     * @type {string}
     * @memberof ProfileUpdateCommand
     */
    lastName?: string | null;
}

/**
 *
 * @export
 * @interface RegistrationRequest
 */
export interface RegistrationRequest {
    /**
     *
     * @type {string}
     * @memberof RegistrationRequest
     */
    login?: string;
    /**
     *
     * @type {string}
     * @memberof RegistrationRequest
     */
    password?: string;
}

/**
 *
 * @export
 * @interface RejectInviteCommand
 */
export interface RejectInviteCommand {
    /**
     *
     * @type {string}
     * @memberof RejectInviteCommand
     */
    profileId?: string;
    /**
     *
     * @type {string}
     * @memberof RejectInviteCommand
     */
    chatId?: string;
}

/**
 *
 * @export
 * @interface RoleDTO
 */
export interface RoleDTO {
    /**
     *
     * @type {number}
     * @memberof RoleDTO
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof RoleDTO
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof RoleDTO
     */
    style?: string;
    /**
     *
     * @type {boolean}
     * @memberof RoleDTO
     */
    creator?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof RoleDTO
     */
    canRestrict?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof RoleDTO
     */
    _default?: boolean;
}

/**
 *
 * @export
 * @interface SendInviteCommand
 */
export interface SendInviteCommand {
    /**
     *
     * @type {string}
     * @memberof SendInviteCommand
     */
    chatId?: string;
    /**
     *
     * @type {string}
     * @memberof SendInviteCommand
     */
    senderProfileId?: string;
    /**
     *
     * @type {string}
     * @memberof SendInviteCommand
     */
    destinationProfileId?: string;
    /**
     *
     * @type {number}
     * @memberof SendInviteCommand
     */
    roleId?: number;
}

/**
 *
 * @export
 * @interface SendMessageCommand
 */
export interface SendMessageCommand {
    /**
     *
     * @type {string}
     * @memberof SendMessageCommand
     */
    fromId?: string;
    /**
     *
     * @type {string}
     * @memberof SendMessageCommand
     */
    chatId?: string;
    /**
     *
     * @type {string}
     * @memberof SendMessageCommand
     */
    content?: string;
}

/**
 *
 * @export
 * @interface TokenResponse
 */
export interface TokenResponse {
    /**
     *
     * @type {string}
     * @memberof TokenResponse
     */
    token?: string;
    /**
     *
     * @type {string}
     * @memberof TokenResponse
     */
    refresh_token?: string;
}

/**
 *
 * @export
 * @interface UpdateAccessTokenRequest
 */
export interface UpdateAccessTokenRequest {
    /**
     *
     * @type {string}
     * @memberof UpdateAccessTokenRequest
     */
    refresh_token?: string;
}

/**
 *
 * @export
 * @interface UserDTO
 */
export interface UserDTO {
    /**
     *
     * @type {string}
     * @memberof UserDTO
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof UserDTO
     */
    login?: string;
}

/**
 * ChatsApi - axios parameter creator
 * @export
 */
export const ChatsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Удалить чат
         * @param {DeleteChatCommand} [deleteChatCommand]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiMessengerChatsDelete: async (deleteChatCommand?: DeleteChatCommand, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/chats`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof deleteChatCommand !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(deleteChatCommand !== undefined ? deleteChatCommand : {})
                : (deleteChatCommand || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Отвергнуть приглашение в чат
         * @param {RejectInviteCommand} [rejectInviteCommand]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiMessengerChatsInviteHandleReject: async (rejectInviteCommand?: RejectInviteCommand, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/chats/invite/handle`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof rejectInviteCommand !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(rejectInviteCommand !== undefined ? rejectInviteCommand : {})
                : (rejectInviteCommand || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Получить информацию о чате
         * @param {string} chatId
         * @param {string} [profileId] ID Профиля отправителя
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiMessengerChatGet: async (chatId: string, profileId?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            if (chatId === null || chatId === undefined) {
                throw new RequiredError('chatId', 'Required parameter chatId was null or undefined when calling getApiMessengerChatGet.');
            }
            const localVarPath = `/api/chats/{chatId}`
                .replace(`{${"chatId"}}`, encodeURIComponent(String(chatId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (profileId !== undefined) {
                localVarQueryParameter['profileId'] = profileId;
            }


            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Получить список чатов, в которых состоит профиль
         * @param {string} [profileId]
         * @param {number} [page]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiMessengerChatsGet: async (profileId?: string, page?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/chats`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (profileId !== undefined) {
                localVarQueryParameter['profileId'] = profileId;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Получить список участников чата
         * @param {string} chatId
         * @param {number} page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiMessengerChatsParticipantsGet: async (chatId: string, page: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            if (chatId === null || chatId === undefined) {
                throw new RequiredError('chatId', 'Required parameter chatId was null or undefined when calling getApiMessengerChatsParticipantsGet.');
            }
            // verify required parameter 'page' is not null or undefined
            if (page === null || page === undefined) {
                throw new RequiredError('page', 'Required parameter page was null or undefined when calling getApiMessengerChatsParticipantsGet.');
            }
            const localVarPath = `/api/chats/{chatId}/participants/{page}`
                .replace(`{${"chatId"}}`, encodeURIComponent(String(chatId)))
                .replace(`{${"page"}}`, encodeURIComponent(String(page)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Получить историю сообщений
         * @param {string} chatId
         * @param {string} [profileId]
         * @param {number} [page]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiMessengerMessagesGetMessages: async (chatId: string, profileId?: string, page?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'chatId' is not null or undefined
            if (chatId === null || chatId === undefined) {
                throw new RequiredError('chatId', 'Required parameter chatId was null or undefined when calling getApiMessengerMessagesGetMessages.');
            }
            const localVarPath = `/api/chats/{chatId}/messages`
                .replace(`{${"chatId"}}`, encodeURIComponent(String(chatId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (profileId !== undefined) {
                localVarQueryParameter['profileId'] = profileId;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Создать чат
         * @param {CreateChatCommand} [createChatCommand]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiMessengerChatsCreate: async (createChatCommand?: CreateChatCommand, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/chats`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof createChatCommand !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(createChatCommand !== undefined ? createChatCommand : {})
                : (createChatCommand || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Пригласить в чат
         * @param {SendInviteCommand} [sendInviteCommand]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiMessengerChatsInvite: async (sendInviteCommand?: SendInviteCommand, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/chats/invite`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof sendInviteCommand !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(sendInviteCommand !== undefined ? sendInviteCommand : {})
                : (sendInviteCommand || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Принять приглашение в чат
         * @param {AcceptInviteCommand} [acceptInviteCommand]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiMessengerChatsInviteHandleAccept: async (acceptInviteCommand?: AcceptInviteCommand, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/chats/invite/handle`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof acceptInviteCommand !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(acceptInviteCommand !== undefined ? acceptInviteCommand : {})
                : (acceptInviteCommand || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Отправить сообщение
         * @param {SendMessageCommand} [sendMessageCommand]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiMessengerMessageSend: async (sendMessageCommand?: SendMessageCommand, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/chats/message`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof sendMessageCommand !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(sendMessageCommand !== undefined ? sendMessageCommand : {})
                : (sendMessageCommand || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChatsApi - functional programming interface
 * @export
 */
export const ChatsApiFp = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Удалить чат
         * @param {DeleteChatCommand} [deleteChatCommand]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteApiMessengerChatsDelete(deleteChatCommand?: DeleteChatCommand, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ChatsApiAxiosParamCreator(configuration).deleteApiMessengerChatsDelete(deleteChatCommand, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Отвергнуть приглашение в чат
         * @param {RejectInviteCommand} [rejectInviteCommand]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteApiMessengerChatsInviteHandleReject(rejectInviteCommand?: RejectInviteCommand, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ChatsApiAxiosParamCreator(configuration).deleteApiMessengerChatsInviteHandleReject(rejectInviteCommand, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Получить информацию о чате
         * @param {string} chatId
         * @param {string} [profileId] ID Профиля отправителя
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiMessengerChatGet(chatId: string, profileId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChatDetailedDTO>> {
            const localVarAxiosArgs = await ChatsApiAxiosParamCreator(configuration).getApiMessengerChatGet(chatId, profileId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Получить список чатов, в которых состоит профиль
         * @param {string} [profileId]
         * @param {number} [page]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiMessengerChatsGet(profileId?: string, page?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ChatMinimalDTO>>> {
            const localVarAxiosArgs = await ChatsApiAxiosParamCreator(configuration).getApiMessengerChatsGet(profileId, page, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Получить список участников чата
         * @param {string} chatId
         * @param {number} page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiMessengerChatsParticipantsGet(chatId: string, page: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ParticipantDTO>>> {
            const localVarAxiosArgs = await ChatsApiAxiosParamCreator(configuration).getApiMessengerChatsParticipantsGet(chatId, page, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Получить историю сообщений
         * @param {string} chatId
         * @param {string} [profileId]
         * @param {number} [page]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiMessengerMessagesGetMessages(chatId: string, profileId?: string, page?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MessageByChatDTO>>> {
            const localVarAxiosArgs = await ChatsApiAxiosParamCreator(configuration).getApiMessengerMessagesGetMessages(chatId, profileId, page, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Создать чат
         * @param {CreateChatCommand} [createChatCommand]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiMessengerChatsCreate(createChatCommand?: CreateChatCommand, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ChatsApiAxiosParamCreator(configuration).postApiMessengerChatsCreate(createChatCommand, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Пригласить в чат
         * @param {SendInviteCommand} [sendInviteCommand]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiMessengerChatsInvite(sendInviteCommand?: SendInviteCommand, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ChatsApiAxiosParamCreator(configuration).postApiMessengerChatsInvite(sendInviteCommand, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Принять приглашение в чат
         * @param {AcceptInviteCommand} [acceptInviteCommand]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiMessengerChatsInviteHandleAccept(acceptInviteCommand?: AcceptInviteCommand, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ChatsApiAxiosParamCreator(configuration).postApiMessengerChatsInviteHandleAccept(acceptInviteCommand, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Отправить сообщение
         * @param {SendMessageCommand} [sendMessageCommand]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiMessengerMessageSend(sendMessageCommand?: SendMessageCommand, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ChatsApiAxiosParamCreator(configuration).postApiMessengerMessageSend(sendMessageCommand, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
                };
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ChatsApi - factory interface
 * @export
 */
export const ChatsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         *
         * @summary Удалить чат
         * @param {DeleteChatCommand} [deleteChatCommand]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiMessengerChatsDelete(deleteChatCommand?: DeleteChatCommand, options?: any): AxiosPromise<void> {
            return ChatsApiFp(configuration).deleteApiMessengerChatsDelete(deleteChatCommand, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Отвергнуть приглашение в чат
         * @param {RejectInviteCommand} [rejectInviteCommand]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiMessengerChatsInviteHandleReject(rejectInviteCommand?: RejectInviteCommand, options?: any): AxiosPromise<void> {
            return ChatsApiFp(configuration).deleteApiMessengerChatsInviteHandleReject(rejectInviteCommand, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Получить информацию о чате
         * @param {string} chatId
         * @param {string} [profileId] ID Профиля отправителя
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiMessengerChatGet(chatId: string, profileId?: string, options?: any): AxiosPromise<ChatDetailedDTO> {
            return ChatsApiFp(configuration).getApiMessengerChatGet(chatId, profileId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Получить список чатов, в которых состоит профиль
         * @param {string} [profileId]
         * @param {number} [page]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiMessengerChatsGet(profileId?: string, page?: number, options?: any): AxiosPromise<Array<ChatMinimalDTO>> {
            return ChatsApiFp(configuration).getApiMessengerChatsGet(profileId, page, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Получить список участников чата
         * @param {string} chatId
         * @param {number} page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiMessengerChatsParticipantsGet(chatId: string, page: number, options?: any): AxiosPromise<Array<ParticipantDTO>> {
            return ChatsApiFp(configuration).getApiMessengerChatsParticipantsGet(chatId, page, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Получить историю сообщений
         * @param {string} chatId
         * @param {string} [profileId]
         * @param {number} [page]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiMessengerMessagesGetMessages(chatId: string, profileId?: string, page?: number, options?: any): AxiosPromise<Array<MessageByChatDTO>> {
            return ChatsApiFp(configuration).getApiMessengerMessagesGetMessages(chatId, profileId, page, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Создать чат
         * @param {CreateChatCommand} [createChatCommand]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiMessengerChatsCreate(createChatCommand?: CreateChatCommand, options?: any): AxiosPromise<void> {
            return ChatsApiFp(configuration).postApiMessengerChatsCreate(createChatCommand, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Пригласить в чат
         * @param {SendInviteCommand} [sendInviteCommand]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiMessengerChatsInvite(sendInviteCommand?: SendInviteCommand, options?: any): AxiosPromise<void> {
            return ChatsApiFp(configuration).postApiMessengerChatsInvite(sendInviteCommand, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Принять приглашение в чат
         * @param {AcceptInviteCommand} [acceptInviteCommand]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiMessengerChatsInviteHandleAccept(acceptInviteCommand?: AcceptInviteCommand, options?: any): AxiosPromise<void> {
            return ChatsApiFp(configuration).postApiMessengerChatsInviteHandleAccept(acceptInviteCommand, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Отправить сообщение
         * @param {SendMessageCommand} [sendMessageCommand]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiMessengerMessageSend(sendMessageCommand?: SendMessageCommand, options?: any): AxiosPromise<void> {
            return ChatsApiFp(configuration).postApiMessengerMessageSend(sendMessageCommand, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ChatsApi - object-oriented interface
 * @export
 * @class ChatsApi
 * @extends {BaseAPI}
 */
export class ChatsApi extends BaseAPI {
    /**
     *
     * @summary Удалить чат
     * @param {DeleteChatCommand} [deleteChatCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatsApi
     */
    public deleteApiMessengerChatsDelete(deleteChatCommand?: DeleteChatCommand, options?: any) {
        return ChatsApiFp(this.configuration).deleteApiMessengerChatsDelete(deleteChatCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Отвергнуть приглашение в чат
     * @param {RejectInviteCommand} [rejectInviteCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatsApi
     */
    public deleteApiMessengerChatsInviteHandleReject(rejectInviteCommand?: RejectInviteCommand, options?: any) {
        return ChatsApiFp(this.configuration).deleteApiMessengerChatsInviteHandleReject(rejectInviteCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Получить информацию о чате
     * @param {string} chatId
     * @param {string} [profileId] ID Профиля отправителя
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatsApi
     */
    public getApiMessengerChatGet(chatId: string, profileId?: string, options?: any) {
        return ChatsApiFp(this.configuration).getApiMessengerChatGet(chatId, profileId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Получить список чатов, в которых состоит профиль
     * @param {string} [profileId]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatsApi
     */
    public getApiMessengerChatsGet(profileId?: string, page?: number, options?: any) {
        return ChatsApiFp(this.configuration).getApiMessengerChatsGet(profileId, page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Получить список участников чата
     * @param {string} chatId
     * @param {number} page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatsApi
     */
    public getApiMessengerChatsParticipantsGet(chatId: string, page: number, options?: any) {
        return ChatsApiFp(this.configuration).getApiMessengerChatsParticipantsGet(chatId, page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Получить историю сообщений
     * @param {string} chatId
     * @param {string} [profileId]
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatsApi
     */
    public getApiMessengerMessagesGetMessages(chatId: string, profileId?: string, page?: number, options?: any) {
        return ChatsApiFp(this.configuration).getApiMessengerMessagesGetMessages(chatId, profileId, page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Создать чат
     * @param {CreateChatCommand} [createChatCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatsApi
     */
    public postApiMessengerChatsCreate(createChatCommand?: CreateChatCommand, options?: any) {
        return ChatsApiFp(this.configuration).postApiMessengerChatsCreate(createChatCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Пригласить в чат
     * @param {SendInviteCommand} [sendInviteCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatsApi
     */
    public postApiMessengerChatsInvite(sendInviteCommand?: SendInviteCommand, options?: any) {
        return ChatsApiFp(this.configuration).postApiMessengerChatsInvite(sendInviteCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Принять приглашение в чат
     * @param {AcceptInviteCommand} [acceptInviteCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatsApi
     */
    public postApiMessengerChatsInviteHandleAccept(acceptInviteCommand?: AcceptInviteCommand, options?: any) {
        return ChatsApiFp(this.configuration).postApiMessengerChatsInviteHandleAccept(acceptInviteCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Отправить сообщение
     * @param {SendMessageCommand} [sendMessageCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatsApi
     */
    public postApiMessengerMessageSend(sendMessageCommand?: SendMessageCommand, options?: any) {
        return ChatsApiFp(this.configuration).postApiMessengerMessageSend(sendMessageCommand, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDocJsonGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/doc.json`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDocJsonGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).apiDocJsonGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
                };
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDocJsonGet(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).apiDocJsonGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiDocJsonGet(options?: any) {
        return DefaultApiFp(this.configuration).apiDocJsonGet(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * FriendsApi - axios parameter creator
 * @export
 */
export const FriendsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Удалить друга
         * @param {string} senderProfileId Тот кто удаляет друга
         * @param {string} destinationProfileId Тот кого удаляют из друзей
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiFriendsRemove: async (senderProfileId: string, destinationProfileId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'senderProfileId' is not null or undefined
            if (senderProfileId === null || senderProfileId === undefined) {
                throw new RequiredError('senderProfileId', 'Required parameter senderProfileId was null or undefined when calling deleteApiFriendsRemove.');
            }
            // verify required parameter 'destinationProfileId' is not null or undefined
            if (destinationProfileId === null || destinationProfileId === undefined) {
                throw new RequiredError('destinationProfileId', 'Required parameter destinationProfileId was null or undefined when calling deleteApiFriendsRemove.');
            }
            const localVarPath = `/api/friends/{senderProfileId}/{destinationProfileId}`
                .replace(`{${"senderProfileId"}}`, encodeURIComponent(String(senderProfileId)))
                .replace(`{${"destinationProfileId"}}`, encodeURIComponent(String(destinationProfileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Получить информацию о дружбе
         * @param {string} profileId
         * @param {string} friendId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiFriendsItem: async (profileId: string, friendId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'profileId' is not null or undefined
            if (profileId === null || profileId === undefined) {
                throw new RequiredError('profileId', 'Required parameter profileId was null or undefined when calling getApiFriendsItem.');
            }
            // verify required parameter 'friendId' is not null or undefined
            if (friendId === null || friendId === undefined) {
                throw new RequiredError('friendId', 'Required parameter friendId was null or undefined when calling getApiFriendsItem.');
            }
            const localVarPath = `/api/friends/{profileId}/{friendId}`
                .replace(`{${"profileId"}}`, encodeURIComponent(String(profileId)))
                .replace(`{${"friendId"}}`, encodeURIComponent(String(friendId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Дружба это не только друг, это также входящий/исходящий запрос в друзья.
         * @summary Получить список дружб*
         * @param {string} profileId
         * @param {number} [page]
         * @param {FriendRelationEnum} [relationType]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiFriendsList: async (profileId: string, page?: number, relationType?: FriendRelationEnum, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'profileId' is not null or undefined
            if (profileId === null || profileId === undefined) {
                throw new RequiredError('profileId', 'Required parameter profileId was null or undefined when calling getApiFriendsList.');
            }
            const localVarPath = `/api/friends/{profileId}`
                .replace(`{${"profileId"}}`, encodeURIComponent(String(profileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (relationType !== undefined) {
                localVarQueryParameter['relationType'] = relationType;
            }


            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Добавить друга
         * @param {string} senderProfileId Тот кто добавляет друга
         * @param {string} destinationProfileId Тот кого добавляют
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiFriendsAdd: async (senderProfileId: string, destinationProfileId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'senderProfileId' is not null or undefined
            if (senderProfileId === null || senderProfileId === undefined) {
                throw new RequiredError('senderProfileId', 'Required parameter senderProfileId was null or undefined when calling postApiFriendsAdd.');
            }
            // verify required parameter 'destinationProfileId' is not null or undefined
            if (destinationProfileId === null || destinationProfileId === undefined) {
                throw new RequiredError('destinationProfileId', 'Required parameter destinationProfileId was null or undefined when calling postApiFriendsAdd.');
            }
            const localVarPath = `/api/friends/{senderProfileId}/{destinationProfileId}`
                .replace(`{${"senderProfileId"}}`, encodeURIComponent(String(senderProfileId)))
                .replace(`{${"destinationProfileId"}}`, encodeURIComponent(String(destinationProfileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FriendsApi - functional programming interface
 * @export
 */
export const FriendsApiFp = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Удалить друга
         * @param {string} senderProfileId Тот кто удаляет друга
         * @param {string} destinationProfileId Тот кого удаляют из друзей
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteApiFriendsRemove(senderProfileId: string, destinationProfileId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await FriendsApiAxiosParamCreator(configuration).deleteApiFriendsRemove(senderProfileId, destinationProfileId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Получить информацию о дружбе
         * @param {string} profileId
         * @param {string} friendId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiFriendsItem(profileId: string, friendId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FriendDTO>> {
            const localVarAxiosArgs = await FriendsApiAxiosParamCreator(configuration).getApiFriendsItem(profileId, friendId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Дружба это не только друг, это также входящий/исходящий запрос в друзья.
         * @summary Получить список дружб*
         * @param {string} profileId
         * @param {number} [page]
         * @param {FriendRelationEnum} [relationType]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiFriendsList(profileId: string, page?: number, relationType?: FriendRelationEnum, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FriendDTO>>> {
            const localVarAxiosArgs = await FriendsApiAxiosParamCreator(configuration).getApiFriendsList(profileId, page, relationType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Добавить друга
         * @param {string} senderProfileId Тот кто добавляет друга
         * @param {string} destinationProfileId Тот кого добавляют
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiFriendsAdd(senderProfileId: string, destinationProfileId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await FriendsApiAxiosParamCreator(configuration).postApiFriendsAdd(senderProfileId, destinationProfileId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
                };
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * FriendsApi - factory interface
 * @export
 */
export const FriendsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         *
         * @summary Удалить друга
         * @param {string} senderProfileId Тот кто удаляет друга
         * @param {string} destinationProfileId Тот кого удаляют из друзей
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiFriendsRemove(senderProfileId: string, destinationProfileId: string, options?: any): AxiosPromise<void> {
            return FriendsApiFp(configuration).deleteApiFriendsRemove(senderProfileId, destinationProfileId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Получить информацию о дружбе
         * @param {string} profileId
         * @param {string} friendId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiFriendsItem(profileId: string, friendId: string, options?: any): AxiosPromise<FriendDTO> {
            return FriendsApiFp(configuration).getApiFriendsItem(profileId, friendId, options).then((request) => request(axios, basePath));
        },
        /**
         * Дружба это не только друг, это также входящий/исходящий запрос в друзья.
         * @summary Получить список дружб*
         * @param {string} profileId
         * @param {number} [page]
         * @param {FriendRelationEnum} [relationType]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiFriendsList(profileId: string, page?: number, relationType?: FriendRelationEnum, options?: any): AxiosPromise<Array<FriendDTO>> {
            return FriendsApiFp(configuration).getApiFriendsList(profileId, page, relationType, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Добавить друга
         * @param {string} senderProfileId Тот кто добавляет друга
         * @param {string} destinationProfileId Тот кого добавляют
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiFriendsAdd(senderProfileId: string, destinationProfileId: string, options?: any): AxiosPromise<void> {
            return FriendsApiFp(configuration).postApiFriendsAdd(senderProfileId, destinationProfileId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FriendsApi - object-oriented interface
 * @export
 * @class FriendsApi
 * @extends {BaseAPI}
 */
export class FriendsApi extends BaseAPI {
    /**
     *
     * @summary Удалить друга
     * @param {string} senderProfileId Тот кто удаляет друга
     * @param {string} destinationProfileId Тот кого удаляют из друзей
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendsApi
     */
    public deleteApiFriendsRemove(senderProfileId: string, destinationProfileId: string, options?: any) {
        return FriendsApiFp(this.configuration).deleteApiFriendsRemove(senderProfileId, destinationProfileId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Получить информацию о дружбе
     * @param {string} profileId
     * @param {string} friendId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendsApi
     */
    public getApiFriendsItem(profileId: string, friendId: string, options?: any) {
        return FriendsApiFp(this.configuration).getApiFriendsItem(profileId, friendId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Дружба это не только друг, это также входящий/исходящий запрос в друзья.
     * @summary Получить список дружб*
     * @param {string} profileId
     * @param {number} [page]
     * @param {FriendRelationEnum} [relationType]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendsApi
     */
    public getApiFriendsList(profileId: string, page?: number, relationType?: FriendRelationEnum, options?: any) {
        return FriendsApiFp(this.configuration).getApiFriendsList(profileId, page, relationType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Добавить друга
     * @param {string} senderProfileId Тот кто добавляет друга
     * @param {string} destinationProfileId Тот кого добавляют
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FriendsApi
     */
    public postApiFriendsAdd(senderProfileId: string, destinationProfileId: string, options?: any) {
        return FriendsApiFp(this.configuration).postApiFriendsAdd(senderProfileId, destinationProfileId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProfilesApi - axios parameter creator
 * @export
 */
export const ProfilesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Удалить профиль
         * @param {string} profileId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiProfilesDelete: async (profileId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'profileId' is not null or undefined
            if (profileId === null || profileId === undefined) {
                throw new RequiredError('profileId', 'Required parameter profileId was null or undefined when calling deleteApiProfilesDelete.');
            }
            const localVarPath = `/api/profiles/{profileId}`
                .replace(`{${"profileId"}}`, encodeURIComponent(String(profileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Получить список своих профилей
         * @param {number} [page]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiProfilesList: async (page?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/profiles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Получить информацию о профиле
         * @param {string} profileId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiProfilesProfile: async (profileId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'profileId' is not null or undefined
            if (profileId === null || profileId === undefined) {
                throw new RequiredError('profileId', 'Required parameter profileId was null or undefined when calling getApiProfilesProfile.');
            }
            const localVarPath = `/api/profiles/{profileId}`
                .replace(`{${"profileId"}}`, encodeURIComponent(String(profileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Создать новый профиль
         * @param {CreateProfileCommand} [createProfileCommand]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiProfilesCreate: async (createProfileCommand?: CreateProfileCommand, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/profiles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof createProfileCommand !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(createProfileCommand !== undefined ? createProfileCommand : {})
                : (createProfileCommand || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Изменить данные профиля
         * @param {ProfileUpdateCommand} [profileUpdateCommand]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putApiProfilesUpdate: async (profileUpdateCommand?: ProfileUpdateCommand, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/profiles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof profileUpdateCommand !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(profileUpdateCommand !== undefined ? profileUpdateCommand : {})
                : (profileUpdateCommand || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProfilesApi - functional programming interface
 * @export
 */
export const ProfilesApiFp = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Удалить профиль
         * @param {string} profileId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteApiProfilesDelete(profileId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ProfilesApiAxiosParamCreator(configuration).deleteApiProfilesDelete(profileId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Получить список своих профилей
         * @param {number} [page]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiProfilesList(page?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProfileDTO>>> {
            const localVarAxiosArgs = await ProfilesApiAxiosParamCreator(configuration).getApiProfilesList(page, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Получить информацию о профиле
         * @param {string} profileId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiProfilesProfile(profileId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfileDTO>> {
            const localVarAxiosArgs = await ProfilesApiAxiosParamCreator(configuration).getApiProfilesProfile(profileId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Создать новый профиль
         * @param {CreateProfileCommand} [createProfileCommand]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiProfilesCreate(createProfileCommand?: CreateProfileCommand, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ProfilesApiAxiosParamCreator(configuration).postApiProfilesCreate(createProfileCommand, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Изменить данные профиля
         * @param {ProfileUpdateCommand} [profileUpdateCommand]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putApiProfilesUpdate(profileUpdateCommand?: ProfileUpdateCommand, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ProfilesApiAxiosParamCreator(configuration).putApiProfilesUpdate(profileUpdateCommand, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
                };
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ProfilesApi - factory interface
 * @export
 */
export const ProfilesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         *
         * @summary Удалить профиль
         * @param {string} profileId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApiProfilesDelete(profileId: string, options?: any): AxiosPromise<void> {
            return ProfilesApiFp(configuration).deleteApiProfilesDelete(profileId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Получить список своих профилей
         * @param {number} [page]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiProfilesList(page?: number, options?: any): AxiosPromise<Array<ProfileDTO>> {
            return ProfilesApiFp(configuration).getApiProfilesList(page, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Получить информацию о профиле
         * @param {string} profileId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiProfilesProfile(profileId: string, options?: any): AxiosPromise<ProfileDTO> {
            return ProfilesApiFp(configuration).getApiProfilesProfile(profileId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Создать новый профиль
         * @param {CreateProfileCommand} [createProfileCommand]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiProfilesCreate(createProfileCommand?: CreateProfileCommand, options?: any): AxiosPromise<void> {
            return ProfilesApiFp(configuration).postApiProfilesCreate(createProfileCommand, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Изменить данные профиля
         * @param {ProfileUpdateCommand} [profileUpdateCommand]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putApiProfilesUpdate(profileUpdateCommand?: ProfileUpdateCommand, options?: any): AxiosPromise<void> {
            return ProfilesApiFp(configuration).putApiProfilesUpdate(profileUpdateCommand, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProfilesApi - object-oriented interface
 * @export
 * @class ProfilesApi
 * @extends {BaseAPI}
 */
export class ProfilesApi extends BaseAPI {
    /**
     *
     * @summary Удалить профиль
     * @param {string} profileId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public deleteApiProfilesDelete(profileId: string, options?: any) {
        return ProfilesApiFp(this.configuration).deleteApiProfilesDelete(profileId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Получить список своих профилей
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public getApiProfilesList(page?: number, options?: any) {
        return ProfilesApiFp(this.configuration).getApiProfilesList(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Получить информацию о профиле
     * @param {string} profileId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public getApiProfilesProfile(profileId: string, options?: any) {
        return ProfilesApiFp(this.configuration).getApiProfilesProfile(profileId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Создать новый профиль
     * @param {CreateProfileCommand} [createProfileCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public postApiProfilesCreate(createProfileCommand?: CreateProfileCommand, options?: any) {
        return ProfilesApiFp(this.configuration).postApiProfilesCreate(createProfileCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Изменить данные профиля
     * @param {ProfileUpdateCommand} [profileUpdateCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public putApiProfilesUpdate(profileUpdateCommand?: ProfileUpdateCommand, options?: any) {
        return ProfilesApiFp(this.configuration).putApiProfilesUpdate(profileUpdateCommand, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Получить информацию о своём пользователе
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiUsersMe: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Получить JWT токен авторизации
         * @summary Вход в аккаунт
         * @param {LoginRequest} [loginRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiAuthTokenLogin: async (loginRequest?: LoginRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/token/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof loginRequest !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(loginRequest !== undefined ? loginRequest : {})
                : (loginRequest || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Обновить JWT & Refresh токен авторизации с помощью Refresh Token
         * @summary Обновить JWT
         * @param {UpdateAccessTokenRequest} [updateAccessTokenRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiAuthTokenRefresh: async (updateAccessTokenRequest?: UpdateAccessTokenRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/token/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof updateAccessTokenRequest !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(updateAccessTokenRequest !== undefined ? updateAccessTokenRequest : {})
                : (updateAccessTokenRequest || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Создать новый аккаунт и получить на него токены
         * @summary Создать аккаунт
         * @param {RegistrationRequest} [registrationRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAppRegister: async (registrationRequest?: RegistrationRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/token/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const nonString = typeof registrationRequest !== 'string';
            const needsSerialization = nonString && configuration && configuration.isJsonMime
                ? configuration.isJsonMime(localVarRequestOptions.headers['Content-Type'])
                : nonString;
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(registrationRequest !== undefined ? registrationRequest : {})
                : (registrationRequest || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Получить информацию о своём пользователе
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiUsersMe(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDTO>> {
            const localVarAxiosArgs = await UsersApiAxiosParamCreator(configuration).getApiUsersMe(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Получить JWT токен авторизации
         * @summary Вход в аккаунт
         * @param {LoginRequest} [loginRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiAuthTokenLogin(loginRequest?: LoginRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenResponse>> {
            const localVarAxiosArgs = await UsersApiAxiosParamCreator(configuration).postApiAuthTokenLogin(loginRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Обновить JWT & Refresh токен авторизации с помощью Refresh Token
         * @summary Обновить JWT
         * @param {UpdateAccessTokenRequest} [updateAccessTokenRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postApiAuthTokenRefresh(updateAccessTokenRequest?: UpdateAccessTokenRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenResponse>> {
            const localVarAxiosArgs = await UsersApiAxiosParamCreator(configuration).postApiAuthTokenRefresh(updateAccessTokenRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Создать новый аккаунт и получить на него токены
         * @summary Создать аккаунт
         * @param {RegistrationRequest} [registrationRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAppRegister(registrationRequest?: RegistrationRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenResponse>> {
            const localVarAxiosArgs = await UsersApiAxiosParamCreator(configuration).postAppRegister(registrationRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: (configuration?.basePath || basePath) + localVarAxiosArgs.url
                };
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         *
         * @summary Получить информацию о своём пользователе
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiUsersMe(options?: any): AxiosPromise<UserDTO> {
            return UsersApiFp(configuration).getApiUsersMe(options).then((request) => request(axios, basePath));
        },
        /**
         * Получить JWT токен авторизации
         * @summary Вход в аккаунт
         * @param {LoginRequest} [loginRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiAuthTokenLogin(loginRequest?: LoginRequest, options?: any): AxiosPromise<TokenResponse> {
            return UsersApiFp(configuration).postApiAuthTokenLogin(loginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Обновить JWT & Refresh токен авторизации с помощью Refresh Token
         * @summary Обновить JWT
         * @param {UpdateAccessTokenRequest} [updateAccessTokenRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postApiAuthTokenRefresh(updateAccessTokenRequest?: UpdateAccessTokenRequest, options?: any): AxiosPromise<TokenResponse> {
            return UsersApiFp(configuration).postApiAuthTokenRefresh(updateAccessTokenRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Создать новый аккаунт и получить на него токены
         * @summary Создать аккаунт
         * @param {RegistrationRequest} [registrationRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAppRegister(registrationRequest?: RegistrationRequest, options?: any): AxiosPromise<TokenResponse> {
            return UsersApiFp(configuration).postAppRegister(registrationRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     *
     * @summary Получить информацию о своём пользователе
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getApiUsersMe(options?: any) {
        return UsersApiFp(this.configuration).getApiUsersMe(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Получить JWT токен авторизации
     * @summary Вход в аккаунт
     * @param {LoginRequest} [loginRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public postApiAuthTokenLogin(loginRequest?: LoginRequest, options?: any) {
        return UsersApiFp(this.configuration).postApiAuthTokenLogin(loginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Обновить JWT & Refresh токен авторизации с помощью Refresh Token
     * @summary Обновить JWT
     * @param {UpdateAccessTokenRequest} [updateAccessTokenRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public postApiAuthTokenRefresh(updateAccessTokenRequest?: UpdateAccessTokenRequest, options?: any) {
        return UsersApiFp(this.configuration).postApiAuthTokenRefresh(updateAccessTokenRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Создать новый аккаунт и получить на него токены
     * @summary Создать аккаунт
     * @param {RegistrationRequest} [registrationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public postAppRegister(registrationRequest?: RegistrationRequest, options?: any) {
        return UsersApiFp(this.configuration).postAppRegister(registrationRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


